require 'rubygems'
require 'wirble'
require 'base64'
require 'digest/md5'
require 'digest/sha1'
require 'uri'
require 'time'
require 'sketches'

Wirble.init
Wirble.colorize

class Time
  alias :to_iso :iso8601
  def self.js(millitime)
    Time.at(millitime / 1000)
  end
end

class String
  def full_uri_escape
    URI.escape(self, Regexp.new("[^#{URI::PATTERN::UNRESERVED}]"))
  end
end

if ENV['RAILS_ENV']
  def Object.method_added(method)
    return super(method) unless method == :helper
    (class<<self;self;end).send(:remove_method, :method_added)

    def helper(*helper_names)
      returning $helper_proxy ||= Object.new do |helper|
        helper_names.each { |h| helper.extend "#{h}_helper".classify.constantize }
      end
    end

    helper.instance_variable_set("@controller", ActionController::Integration::Session.new)

    def helper.method_missing(method, *args, &block)
      @controller.send(method, *args, &block) if @controller && method.to_s =~ /_path$|_url$/
    end

    helper :application rescue nil
  end 

  def session id = nil
    if id
      file = "tmp/sessions/ruby_sess.#{id}"
    else
      file = Dir['tmp/sessions/ruby_sess.*'].sort { |a, b| File.atime(a) <=> File.atime(b) }.last
    end
    Marshal.load(File.open(file))
  end
end
